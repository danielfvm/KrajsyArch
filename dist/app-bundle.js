/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/krajsy.ts":
/*!***********************!*\
  !*** ./src/krajsy.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.assemble = exports.CPU = exports.Instructions = exports.Registers = exports.RAM = exports.ROM = void 0;
const Empty = (length) => Array.from(Array(length).keys()).map(() => 0);
class ROM {
    constructor(data = null) {
        var _a;
        this.data = Empty(256);
        this.memcpy(data, 0, (_a = data === null || data === void 0 ? void 0 : data.length) !== null && _a !== void 0 ? _a : 0);
    }
    memcpy(src, dest, size) {
        for (let i = dest; i < dest + size; ++i)
            this.data[i] = src[i];
    }
    get(idx) {
        if (idx < 0 || idx > 255)
            throw "Program tried to access memory out of bounds!";
        return this.data[idx];
    }
    dump() {
        return this.data.map((x, i) => x.toString(16).padStart(2, '0') + (((i + 1) % 16) ? ' ' : '\n')).join('');
    }
}
exports.ROM = ROM;
class RAM extends ROM {
    set(idx, data) {
        if (idx < 0 || idx > 255)
            throw "Program tried to access memory out of bounds!";
        this.data[idx] = data;
    }
    reset() {
        this.data = Empty(256);
    }
}
exports.RAM = RAM;
var Registers;
(function (Registers) {
    Registers[Registers["A"] = 0] = "A";
    Registers[Registers["B"] = 1] = "B";
    Registers[Registers["PC"] = 2] = "PC";
})(Registers || (exports.Registers = Registers = {}));
var Instructions;
(function (Instructions) {
    Instructions[Instructions["INV"] = 0] = "INV";
    Instructions[Instructions["ADD"] = 1] = "ADD";
    Instructions[Instructions["SUB"] = 2] = "SUB";
    Instructions[Instructions["OR"] = 3] = "OR";
    Instructions[Instructions["AND"] = 4] = "AND";
    Instructions[Instructions["XOR"] = 5] = "XOR";
    Instructions[Instructions["GET"] = 6] = "GET";
    Instructions[Instructions["SET"] = 7] = "SET";
    Instructions[Instructions["LD"] = 8] = "LD";
    Instructions[Instructions["SWP"] = 9] = "SWP";
    // ...
    Instructions[Instructions["JZ"] = 28] = "JZ";
    Instructions[Instructions["JNZ"] = 29] = "JNZ";
    Instructions[Instructions["JG"] = 30] = "JG";
    Instructions[Instructions["JL"] = 31] = "JL";
})(Instructions || (exports.Instructions = Instructions = {}));
class CPU {
    constructor(rom, ram) {
        this.rom = rom;
        this.ram = ram;
        this.A = this.B = this.PC = 0;
    }
    step() {
        var _a, _b;
        // Read instruction code from rom
        const opcode = this.rom.get(this.PC);
        const op0 = (opcode >> 7) & 0b1; // Selection between A/B register as X
        const op1 = (opcode >> 5) & 0b11; // Selection between A/B/RAM/ROM as Y
        const ins = opcode & 0b11111; // Instruction to execute between X and Y
        const X = op0 ? this.B : this.A;
        const Y = op1 == 0b00 ? this.A :
            op1 == 0b01 ? this.B :
                op1 == 0b10 ? this.ram.get(this.rom.get(++this.PC)) :
                    op1 == 0b11 ? this.rom.get(++this.PC) : 0;
        let X0 = null;
        let Y0 = null;
        switch (ins) {
            case Instructions.INV:
                X0 = ~X;
                break;
            case Instructions.ADD:
                X0 = X + Y;
                break;
            case Instructions.SUB:
                X0 = X - Y;
                break;
            case Instructions.OR:
                X0 = X | Y;
                break;
            case Instructions.AND:
                X0 = X & Y;
                break;
            case Instructions.XOR:
                X0 = X ^ Y;
                break;
            case Instructions.GET:
                X0 = this.ram.get(Y);
                break;
            case Instructions.SET:
                this.ram.set(Y, X);
                break;
            case Instructions.LD:
                X0 = Y;
                break;
            case Instructions.SWP:
                {
                    [this.A, this.B] = [this.B, this.A];
                }
                break;
            case Instructions.JZ:
                {
                    if (X == 0)
                        this.PC = Y - 1;
                }
                break;
            case Instructions.JNZ:
                {
                    if (X != 0)
                        this.PC = Y - 1;
                }
                break;
            case Instructions.JG:
                {
                    if (X > 0)
                        this.PC = Y - 1;
                }
                break;
            case Instructions.JL:
                {
                    if (X < 0)
                        this.PC = Y - 1;
                }
                break;
        }
        // Update registers, make sure they are not overflowing
        this.PC = (this.PC + 1) & 0xFF;
        this.A = ((_a = (op0 ? Y0 : X0)) !== null && _a !== void 0 ? _a : this.A) & 0xFF;
        this.B = ((_b = (op0 ? X0 : Y0)) !== null && _b !== void 0 ? _b : this.B) & 0xFF;
    }
    reset() {
        this.ram.reset();
        this.A = this.B = this.PC = 0;
    }
    dump() {
        console.log(`A: ${this.A.toString(16)}`);
        console.log(`B: ${this.B.toString(16)}`);
        console.log(`PC: ${this.PC.toString(16)}`);
        console.log(`RAM:\n${this.ram.dump()}`);
        console.log(`ROM:\n${this.rom.dump()}`);
    }
}
exports.CPU = CPU;
const assemble = (code) => {
    const lines = code.split('\n').filter((x) => x.trim().length != 0 && !x.startsWith(';'));
    const labels = {};
    const bytes = [];
    let layout = "";
    const fetchOperant = (token) => {
        if (token == undefined)
            return [0, -1];
        switch (token[0]) {
            case 'A':
                return [0b00, -1];
            case 'B':
                return [0b01, -1];
            case '*':
                return [0b10, parseInt(token.substring(1), 16)];
            case '#':
                return [0b11, parseInt(token.substring(1), 16)];
            default:
                if (labels[token] != undefined) {
                    return [0b11, labels[token]];
                }
                throw "Invalid operant value!";
        }
    };
    lines.forEach((line) => {
        const tokens = line.split(';')[0].split(' ');
        const opcode = tokens.shift().toUpperCase();
        const operants = tokens.join('').toUpperCase().split(',').filter(x => x.trim().length > 0);
        if (opcode.endsWith(':')) {
            labels[opcode.substring(0, opcode.length - 1)] = bytes.length;
            return;
        }
        const ins = Instructions[opcode];
        if (ins == undefined)
            throw "Opcode does not exist!";
        const x = operants.length > 0 && fetchOperant(operants[0]);
        const y = operants.length > 1 && fetchOperant(operants[1]);
        if (x[0] > 0b01)
            throw "First operant can only be A or B!";
        const code = (x[0] << 7) | (y[0] << 5) | ins;
        let row = code.toString(16).padStart(2, '0') + ' ';
        let addr = bytes.length;
        bytes.push(code);
        if (y[1] >= 0) {
            bytes.push(y[1]);
            row += y[1].toString(16).padStart(2, '0') + ' ';
        }
        layout += (addr.toString() + ':').padStart(4, '0').padEnd(8, ' ') + row.padEnd(10, ' ') + `; ${line}\n`;
    });
    return {
        bytes: bytes,
        layout: layout,
    };
};
exports.assemble = assemble;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
const krajsy_1 = __webpack_require__(/*! ./krajsy */ "./src/krajsy.ts");
window.onload = () => {
    const input = document.getElementById("input");
    const output = document.getElementById("output");
    const ram = document.getElementById("ram");
    const regA = document.getElementById("regA");
    const regB = document.getElementById("regB");
    const regPC = document.getElementById("regPC");
    const reset = document.getElementById("reset");
    const step = document.getElementById("step");
    const compile = document.getElementById("compile");
    const run = document.getElementById("run");
    const share = document.getElementById("share");
    let result = null;
    let cpu = null;
    let inv = null;
    if (window.location.search.length > 0) {
        try {
            input.value = atob(window.location.search.replace("?share=", ""));
        }
        catch (e) { }
    }
    reset.onclick = () => {
        cpu === null || cpu === void 0 ? void 0 : cpu.reset();
        updateDisplay();
    };
    step.onclick = () => {
        if (result.layout.split('\n').filter((x) => parseInt(x) == cpu.PC).length == 0) {
            if (inv != null)
                run.onclick(null);
            alert("PC hit end of ROM");
        }
        cpu === null || cpu === void 0 ? void 0 : cpu.step();
        updateDisplay();
    };
    compile.onclick = () => {
        try {
            result = (0, krajsy_1.assemble)(input.value);
            output.innerHTML = result.layout;
            cpu = new krajsy_1.CPU(new krajsy_1.ROM(result.bytes), new krajsy_1.RAM());
            updateDisplay();
        }
        catch (e) {
            output.value = e;
        }
    };
    run.onclick = () => {
        run.innerText = inv == null ? "Stop" : "Run";
        if (inv == null) {
            inv = setInterval(() => {
                step.onclick(null);
            }, 100);
        }
        else {
            clearInterval(inv);
            inv = null;
        }
    };
    share.onclick = () => {
        const url = window.location;
        const base = url.toString().replace(window.location.search, "");
        const link = base + '?share=' + btoa(input.value);
        navigator.clipboard.writeText(link).then(() => {
            alert("Copied link to clipboard!");
        }, (err) => {
            alert("Error copying link to clipboard: " + err);
        });
    };
    input.addEventListener('keydown', function (e) {
        if (e.key == 'Tab') {
            e.preventDefault();
            var start = this.selectionStart;
            var end = this.selectionEnd;
            // set textarea value to: text before caret + tab + text after caret
            this.value = this.value.substring(0, start) + "\t" + this.value.substring(end);
            // put caret at right position again
            this.selectionStart = this.selectionEnd = start + 1;
        }
    });
    const updateDisplay = () => {
        var _a;
        ram.value = (_a = cpu === null || cpu === void 0 ? void 0 : cpu.ram) === null || _a === void 0 ? void 0 : _a.dump();
        regA.value = `0x${cpu === null || cpu === void 0 ? void 0 : cpu.A.toString(16).padStart(2, '0')}\t0b${cpu === null || cpu === void 0 ? void 0 : cpu.A.toString(2).padStart(8, '0')}\t${cpu === null || cpu === void 0 ? void 0 : cpu.A}`;
        regB.value = `0x${cpu === null || cpu === void 0 ? void 0 : cpu.B.toString(16).padStart(2, '0')}\t0b${cpu === null || cpu === void 0 ? void 0 : cpu.B.toString(2).padStart(8, '0')}\t${cpu === null || cpu === void 0 ? void 0 : cpu.B}`;
        regPC.value = `0x${cpu === null || cpu === void 0 ? void 0 : cpu.PC.toString(16).padStart(2, '0')}\t0b${cpu === null || cpu === void 0 ? void 0 : cpu.PC.toString(2).padStart(8, '0')}\t${cpu === null || cpu === void 0 ? void 0 : cpu.PC}`;
        output.value = result.layout.split('\n').map((x) => parseInt(x) == cpu.PC ? `>${x}` : ' ' + x).join('\n').replace(/\n$/g, '\n\n');
    };
    compile.onclick(null);
};

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,